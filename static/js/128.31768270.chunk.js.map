{"version":3,"file":"static/js/128.31768270.chunk.js","mappings":"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","sources":["components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","redux/filterSlice/selectors.js","components/Filter/Filter.jsx","redux/contactsSlice/selectors.js","webpack://react-homework-template/./src/components/FormData/FormData.module.css?939a","components/FormData/FormData.jsx","redux/selectors.js","pages/Contacts.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactsSlice/operations';\nimport {\n  Avatar,\n  IconButton,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport ContactPhoneIcon from '@mui/icons-material/ContactPhone';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <ListItem\n      sx={{\n        boxShadow: '5px 5px 5px grey',\n        '&:hover': { backgroundColor: 'lightblue' },\n      }}\n      secondaryAction={\n        <IconButton edge=\"end\" aria-label=\"delete\" onClick={handleDelete}>\n          <DeleteIcon sx={{ '&:hover': { color: 'white' } }} />\n        </IconButton>\n      }\n    >\n      <ListItemAvatar>\n        <Avatar sx={{ backgroundColor: 'ButtonFace' }}>\n          <ContactPhoneIcon sx={{ fill: '#1976d2' }} />\n        </Avatar>\n      </ListItemAvatar>\n      <ListItemText primary={name} secondary={number} />\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import { ContactItem } from '../ContactsItem/ContactsItem';\nimport PropTypes from 'prop-types';\nimport { List } from '@mui/material';\n\nconst ContactsList = ({ items }) => {\n  return (\n    <List>\n      {items.map(({ id, name, number }) => (\n        <ContactItem key={id} id={id} name={name} number={number} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.exact({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","export const selectFilter = state => state.filter.filter;\n","import { Box, TextField, Typography } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/filterSlice/selectors';\nimport { changeFilter } from 'redux/filterSlice/filter';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n  const onChangeFilter = e => dispatch(changeFilter(e.target.value));\n\n  return (\n    <>\n      <Typography\n        variant=\"h4\"\n        component=\"h2\"\n        sx={{\n          marginBottom: 0,\n          textAlign: 'center',\n          padding: '12px 12px 0 12px',\n          fontWeight: '700',\n        }}\n      >\n        Contacts\n      </Typography>\n      <Box\n        component=\"form\"\n        sx={{\n          '& .MuiTextField-root': { m: 1, width: '25ch' },\n        }}\n        noValidate\n        autoComplete=\"off\"\n      >\n        <Box sx={{ textAlign: 'center' }}>\n          <TextField\n            id=\"standard-search\"\n            label=\"Find contacts by name\"\n            type=\"search\"\n            variant=\"standard\"\n            value={filter}\n            onChange={onChangeFilter}\n          />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nFilter.propTypes = {\n  filter: PropTypes.string.isRequired,\n};\n","export const selectContacts = state => state.contacts.contacts;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"FormData_form__UkWuB\",\"labelWrapperName\":\"FormData_labelWrapperName__xtyq-\",\"labelWrapperNumber\":\"FormData_labelWrapperNumber__khQLL\",\"formLabelName\":\"FormData_formLabelName__gGPI6\",\"formLabelNumber\":\"FormData_formLabelNumber__X4Fyp\",\"formInputName\":\"FormData_formInputName__6cssI\",\"formInputNumber\":\"FormData_formInputNumber__3POoe\",\"btnSubmit\":\"FormData_btnSubmit__feP85\"};","import { nanoid } from 'nanoid';\nimport { Field, Form, Formik } from 'formik';\nimport css from './FormData.module.css';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contactsSlice/operations';\nimport { selectContacts } from 'redux/contactsSlice/selectors';\n\nconst schema = yup.object().shape({\n  name: yup.string().min(2, 'Too short').required(''),\n  number: yup.string().length(9, 'Format: xxx-xx-xx').required(''),\n});\n\nexport const FormData = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const nameInputId = nanoid(5);\n  const numberInputId = nanoid(5);\n\n  const initialValues = {\n    name: '',\n    number: '',\n  };\n\n  const handleSubmit = (values, { resetForm }) => {\n    for (const contact of contacts) {\n      if (contact.name.toLowerCase() === values.name.toLowerCase()) {\n        alert(`${values.name} is already in contacts`);\n        return;\n      }\n    }\n    dispatch(addContact(values));\n    resetForm();\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n    >\n      <Form className={css.form}>\n        <div className={css.labelWrapperName}>\n          <label className={css.formLabelName} htmlFor={nameInputId}>\n            Name\n          </label>\n          <Field\n            className={css.formInputName}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            id={nameInputId}\n            placeholder=\"John Doe\"\n          />\n        </div>\n        <div className={css.labelWrapperNumber}>\n          <label className={css.formLabelNumber} htmlFor={numberInputId}>\n            Number\n          </label>\n          <Field\n            className={css.formInputNumber}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            id={numberInputId}\n            placeholder=\"xxx-xx-xx\"\n          />\n        </div>\n        <button className={css.btnSubmit} type=\"submit\">\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from './contactsSlice/selectors';\nimport { selectFilter } from './filterSlice/selectors';\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  }\n);\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { fetchContacts } from 'redux/contactsSlice/operations';\nimport ContactsList from 'components/ContactsList/ContactsList';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectContacts, selectIsLoading } from 'redux/contactsSlice/selectors';\nimport { selectFilter } from 'redux/filterSlice/selectors';\nimport { FormData } from 'components/FormData/FormData';\nimport { selectVisibleContacts } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectContacts);\n\n  const filteredContacts = useSelector(selectFilter);\n  const visibleContacts = useSelector(selectVisibleContacts);\n\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <FormData />\n      {contacts.length > 0 ? (\n        <>\n          <Filter filter={filteredContacts} />\n          <ContactsList items={visibleContacts} />\n        </>\n      ) : (\n        <p style={{ textAlign: 'center' }}>There are no contacts</p>\n      )}\n    </HelmetProvider>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactItem","id","name","number","dispatch","useDispatch","ListItem","sx","boxShadow","backgroundColor","secondaryAction","IconButton","edge","onClick","deleteContact","Delete","color","ListItemAvatar","Avatar","ContactPhone","fill","ListItemText","primary","secondary","items","List","map","selectFilter","state","filter","Filter","useSelector","Typography","variant","component","marginBottom","textAlign","padding","fontWeight","Box","m","width","noValidate","autoComplete","TextField","label","type","value","onChange","e","changeFilter","target","selectContacts","contacts","selectIsLoading","isLoading","schema","yup","shape","min","required","length","FormData","nameInputId","nanoid","numberInputId","initialValues","onSubmit","values","resetForm","toLowerCase","alert","addContact","validationSchema","className","css","htmlFor","pattern","title","placeholder","selectVisibleContacts","createSelector","normalizedFilter","contact","includes","useEffect","fetchContacts","filteredContacts","visibleContacts","style"],"sourceRoot":""}